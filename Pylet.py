import telebot
from telebot import types
import random
import threading
import time

TOKEN = '6999677790:AAEK39B36J8q5-yMeb98RF-OY_mdj9Qoem4'  # <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

CHAMBERS = 6
MAX_HP = 10
MAX_PLAYERS = 8
JOIN_TIME = 30  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –º—É–ª—å—Ç–∏

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–≥—Ä ---
bot_games = {}      # user_id -> –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
multi_games = {}    # chat_id -> –º—É–ª—å—Ç–∏ –∏–≥—Ä–∞


def create_magazine():
    bullets = ['–±–æ–µ–≤–æ–π'] + ['—Ö–æ–ª–æ—Å—Ç–æ–π'] * (CHAMBERS - 1)
    random.shuffle(bullets)
    return bullets


def get_bullet(magazine):
    if not magazine:
        magazine.extend(create_magazine())
    return magazine.pop()


def mention(user):
    if user.username:
        return f"@{user.username}"
    else:
        return user.first_name or "–ò–≥—Ä–æ–∫"


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚ñ∂ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º", callback_data='start_bot'),
        types.InlineKeyboardButton("üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", callback_data='start_multi_lobby')
    )
    markup.row(
        types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
        types.InlineKeyboardButton("‚èπ –í—ã—Ö–æ–¥", callback_data='exit')
    )
    return markup


@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=main_menu_markup())


@bot.callback_query_handler(func=lambda c: True)
def callback_handler(call):
    data = call.data
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if data == 'main_menu':
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", chat_id=chat_id, message_id=call.message.message_id,
                              reply_markup=main_menu_markup())
        bot.answer_callback_query(call.id)
        return

    if data == 'help':
        help_text = (
            "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º:\n"
            "- –í—ã –∏ –±–æ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞.\n"
            "- –í –±–∞—Ä–∞–±–∞–Ω–µ 1 –±–æ–µ–≤–æ–π –ø–∞—Ç—Ä–æ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–æ–ª–æ—Å—Ç—ã–µ.\n"
            "- –ú–æ–∂–Ω–æ —Å—Ç—Ä–µ–ª—è—Ç—å –≤ —Å–µ–±—è –∏–ª–∏ –≤ –±–æ—Ç–∞.\n"
            "- –ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –±–æ–µ–≤–æ–π, –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç 1 HP.\n"
            "- –¶–µ–ª—å ‚Äî –æ—Å—Ç–∞—Ç—å—Å—è –∂–∏–≤—ã–º.\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:\n"
            "- –î–æ 8 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –≤ –ª–æ–±–±–∏.\n"
            "- 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n"
            "- –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–µ–ª—è—é—Ç –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞ –∏–ª–∏ –≤ —Å–µ–±—è.\n"
            "- –ö–Ω–æ–ø–∫–∞ '–°—Ç–æ–ø' –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä—ã.\n"
            "- –ü–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∂–∏–≤—à–∏–π.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
        bot.edit_message_text(help_text, chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    if data == 'exit':
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in bot_games:
            del bot_games[user_id]

        if chat_id in multi_games:
            mg = multi_games[chat_id]
            if user_id in mg['players']:
                mg['players'].remove(user_id)
            if user_id in mg.get('hp', {}):
                del mg['hp'][user_id]

        bot.edit_message_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", chat_id=chat_id, message_id=call.message.message_id,
                              reply_markup=main_menu_markup())
        bot.answer_callback_query(call.id)
        return

    # --- –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º ---
    if data == 'start_bot':
        if user_id in bot_games:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.", show_alert=True)
            return
        bot_games[user_id] = {
            'hp': {user_id: MAX_HP, 0: MAX_HP},
            'turn': 0,  # 0 - –∏–≥—Ä–æ–∫, 1 - –±–æ—Ç
            'magazine': create_magazine(),
            'chat_id': chat_id,
            'message_id': None
        }
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥.")
        send_bot_game_message(user_id)
        return

    # –•–æ–¥—ã –≤ –∏–≥—Ä–µ —Å –±–æ—Ç–æ–º
    if data.startswith('bot_shoot_') or data == 'bot_stop' or data == 'main_menu':
        if user_id not in bot_games:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.", show_alert=True)
            return
        game = bot_games[user_id]

        if data == 'main_menu':
            # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            del bot_games[user_id]
            bot.edit_message_text("–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", chat_id=chat_id, message_id=call.message.message_id,
                                  reply_markup=main_menu_markup())
            bot.answer_callback_query(call.id)
            return

        if data == 'bot_stop':
            del bot_games[user_id]
            bot.edit_message_text("–í—ã —Å–¥–∞–ª–∏—Å—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", chat_id=chat_id, message_id=call.message.message_id,
                                  reply_markup=main_menu_markup())
            bot.answer_callback_query(call.id)
            return

        if game['turn'] != 0:
            bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.", show_alert=True)
            return

        target = None
        if data == 'bot_shoot_self':
            target = user_id
        elif data == 'bot_shoot_bot':
            target = 0
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
            return

        bullet = get_bullet(game['magazine'])
        text = f"–í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ {'–≤ —Å–µ–±—è' if target == user_id else '–≤ –±–æ—Ç–∞'}. –ü–∞—Ç—Ä–æ–Ω ‚Äî {bullet}."

        if bullet == '–±–æ–µ–≤–æ–π':
            game['hp'][target] -= 1
            text += f"\n{'–í—ã' if target == user_id else '–ë–æ—Ç'} –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω! HP: {game['hp'][target]}."
            game['turn'] = 1  # —Ö–æ–¥ –±–æ—Ç–∞
        else:
            text += "\n–•–æ–ª–æ—Å—Ç–æ–π –ø–∞—Ç—Ä–æ–Ω, —É—Ä–æ–Ω–∞ –Ω–µ—Ç."
            if target == user_id:
                game['turn'] = 0  # –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑
            else:
                game['turn'] = 1

        bot.edit_message_text(text, chat_id=chat_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

        if game['hp'][user_id] <= 0:
            bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            del bot_games[user_id]
            return
        elif game['hp'][0] <= 0:
            bot.send_message(chat_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            del bot_games[user_id]
            return

        if game['turn'] == 1:
            # –•–æ–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            threading.Thread(target=bot_turn, args=(user_id,)).start()
        else:
            send_bot_game_message(user_id)
        return

    # --- –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä ---
    if data == 'start_multi_lobby':
        if chat_id in multi_games and not multi_games[chat_id]['started']:
            bot.answer_callback_query(call.id, "–õ–æ–±–±–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –∂–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤.")
            return
        if chat_id in multi_games and multi_games[chat_id]['started']:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.")
            return

        multi_games[chat_id] = {
            'players': [],
            'hp': {},
            'turn_index': 0,
            'started': False,
            'magazine': create_magazine(),
            'message_id': call.message.message_id,
            'stop_votes': set(),
            'join_end_time': time.time() + JOIN_TIME
        }

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë§ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É", callback_data='multi_join'))
        markup.add(types.InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∞", callback_data='multi_cancel'))
        markup.add(types.InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

        bot.edit_message_text(
            f"–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {MAX_PLAYERS})\n"
            f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {JOIN_TIME} —Å–µ–∫—É–Ω–¥\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n"
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: 0",
            chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup
        )
        bot.answer_callback_query(call.id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
        threading.Thread(target=multi_wait_and_start, args=(chat_id,)).start()
        return

    if data == 'multi_join':
        mg = multi_games.get(chat_id)
        if not mg or mg['started']:
            bot.answer_callback_query(call.id, "–õ–æ–±–±–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
            return

        if user_id in mg['players']:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
            return

        if len(mg['players']) >= MAX_PLAYERS:
            bot.answer_callback_query(call.id, "–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", show_alert=True)
            return

        mg['players'].append(user_id)
        mg['hp'][user_id] = MAX_HP

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë§ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É", callback_data='multi_join'))
        markup.add(types.InlineKeyboardButton("üö™ –û—Ç–º–µ–Ω–∞", callback_data='multi_cancel'))
        markup.add(types.InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

        bot.edit_message_text(
            f"–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {MAX_PLAYERS})\n"
            f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {JOIN_TIME} —Å–µ–∫—É–Ω–¥\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n\n"
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(mg['players'])}",
            chat_id=chat_id, message_id=mg['message_id'], reply_markup=markup
        )
        bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å.")
        return

    if data == 'multi_cancel':
        mg = multi_games.get(chat_id)
        if not mg or mg['started']:
            bot.answer_callback_query(call.id, "–õ–æ–±–±–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
            return
        del multi_games[chat_id]
        bot.edit_message_text("–õ–æ–±–±–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", chat_id=chat_id, message_id=call.message.message_id,
                              reply_markup=main_menu_markup())
        bot.answer_callback_query(call.id)
        return

    # –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –∏–≥—Ä–∞ –∏–¥—ë—Ç
    mg = multi_games.get(chat_id)
    if not mg or not mg['started']:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if data == 'multi_stop':
        if user_id in mg['stop_votes']:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É.", show_alert=True)
            return
        mg['stop_votes'].add(user_id)
        votes = len(mg['stop_votes'])
        total = len(mg['players'])
        bot.answer_callback_query(call.id, f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ì–æ–ª–æ—Å–æ–≤: {votes}/{total}")
        bot.send_message(chat_id, f"{mention(call.from_user)} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä—ã. ({votes}/{total})")

        if votes == total:
            bot.send_message(chat_id, "–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            end_multi_game(chat_id)
        return

    if data.startswith('multi_shoot_'):
        if user_id != mg['players'][mg['turn_index']]:
            bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.", show_alert=True)
            return

        try:
            target_id = int(data.split('_')[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫.", show_alert=True)
            return

        if target_id not in mg['players']:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        bullet = get_bullet(mg['magazine'])
        shooter_mention = mention(call.from_user)
        target_mention = mention(bot.get_chat_member(chat_id, target_id).user)

        text = f"{shooter_mention} —Å—Ç—Ä–µ–ª—è–µ—Ç {'–≤ —Å–µ–±—è' if user_id == target_id else f'–≤ {target_mention}'}. –ü–∞—Ç—Ä–æ–Ω ‚Äî {bullet}."

        if bullet == '–±–æ–µ–≤–æ–π':
            mg['hp'][target_id] -= 1
            text += f"\n{target_mention} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω! HP: {mg['hp'][target_id]}."
        else:
            text += "\n–•–æ–ª–æ—Å—Ç–æ–π –ø–∞—Ç—Ä–æ–Ω, —É—Ä–æ–Ω–∞ –Ω–µ—Ç."

        if mg['hp'][target_id] <= 0:
            text += f"\n{target_mention} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã."
            mg['players'].remove(target_id)
            del mg['hp'][target_id]
            if target_id in mg['stop_votes']:
                mg['stop_votes'].remove(target_id)

        if len(mg['players']) <= 1:
            text += "\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
            bot.edit_message_text(text, chat_id=chat_id, message_id=call.message.message_id)
            end_multi_game(chat_id)
            bot.answer_callback_query(call.id)
            return

        # –õ–æ–≥–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–æ–≤
        if user_id == target_id:
            if bullet == '—Ö–æ–ª–æ—Å—Ç–æ–π':
                pass  # —Ö–æ–¥ —Ç–æ—Ç –∂–µ
            else:
                mg['turn_index'] = (mg['turn_index'] + 1) % len(mg['players'])
        else:
            mg['turn_index'] = (mg['turn_index'] + 1) % len(mg['players'])

        mg['stop_votes'] = set()

        bot.edit_message_text(text, chat_id=chat_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

        time.sleep(2)
        send_multi_game_message(chat_id)
        return


def send_bot_game_message(user_id):
    game = bot_games.get(user_id)
    if not game:
        return
    chat_id = game['chat_id']
    hp = game['hp']
    turn = game['turn']

    text = f"–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º.\n–í–∞—à HP: {hp[user_id]}\nHP –±–æ—Ç–∞: {hp[0]}\n{'–í–∞—à —Ö–æ–¥' if turn == 0 else '–•–æ–¥ –±–æ—Ç–∞'}"

    markup = types.InlineKeyboardMarkup()
    if turn == 0:
        markup.row(
            types.InlineKeyboardButton("–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ —Å–µ–±—è", callback_data='bot_shoot_self'),
            types.InlineKeyboardButton("–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ –±–æ—Ç–∞", callback_data='bot_shoot_bot')
        )
        markup.row(types.InlineKeyboardButton("–°–¥–∞—Ç—å—Å—è", callback_data='bot_stop'))
        markup.row(types.InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    else:
        markup.row(types.InlineKeyboardButton("–ñ–¥–µ–º —Ö–æ–¥ –±–æ—Ç–∞...", callback_data='noop'))

    msg = bot.send_message(chat_id, text, reply_markup=markup)
    game['message_id'] = msg.message_id


def bot_turn(user_id):
    time.sleep(2)
    game = bot_games.get(user_id)
    if not game:
        return
    chat_id = game['chat_id']
    hp = game['hp']

    target = random.choice([user_id, 0])
    bullet = get_bullet(game['magazine'])

    text = f"–ë–æ—Ç —Å—Ç—Ä–µ–ª—è–µ—Ç {'–≤ —Å–µ–±—è' if target == 0 else '–≤ –≤–∞—Å'}. –ü–∞—Ç—Ä–æ–Ω ‚Äî {bullet}."

    if bullet == '–±–æ–µ–≤–æ–π':
        hp[target] -= 1
        text += f"\n{'–ë–æ—Ç' if target == 0 else '–í—ã'} –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω! HP: {hp[target]}."

    if target == 0:
        if bullet == '–±–æ–µ–≤–æ–π':
            game['turn'] = 0
        else:
            game['turn'] = 1
    else:
        game['turn'] = 0

    bot.edit_message_text(text, chat_id=chat_id, message_id=game['message_id'])

    if hp[user_id] <= 0:
        bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        del bot_games[user_id]
        return
    elif hp[0] <= 0:
        bot.send_message(chat_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        del bot_games[user_id]
        return

    send_bot_game_message(user_id)


def multi_wait_and_start(chat_id):
    time.sleep(JOIN_TIME)
    mg = multi_games.get(chat_id)
    if not mg or mg['started']:
        return

    if len(mg['players']) < 2:
        bot.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=chat_id, message_id=mg['message_id'],
                              reply_markup=main_menu_markup())
        del multi_games[chat_id]
        return

    mg['started'] = True
    mg['turn_index'] = 0
    mg['stop_votes'] = set()
    send_multi_game_message(chat_id)


def send_multi_game_message(chat_id):
    mg = multi_games.get(chat_id)
    if not mg:
        return

    players = mg['players']
    hp = mg['hp']
    turn_index = mg['turn_index']
    current_player = players[turn_index]

    text = "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞.\n"
    for p in players:
        user = bot.get_chat_member(chat_id, p).user
        text += f"{mention(user)}: HP {hp[p]}\n"
    current_user = bot.get_chat_member(chat_id, current_player).user
    text += f"\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞ {mention(current_user)}."

    markup = types.InlineKeyboardMarkup()
    row = []
    for p in players:
        user = bot.get_chat_member(chat_id, p).user
        btn_text = "–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ —Å–µ–±—è" if p == current_player else f"–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ {mention(user)}"
        row.append(types.InlineKeyboardButton(btn_text, callback_data=f"multi_shoot_{p}"))
        if len(row) == 3:
            markup.row(*row)
            row = []
    if row:
        markup.row(*row)

    markup.row(types.InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data="multi_stop"))

    try:
        bot.edit_message_text(text, chat_id=chat_id, message_id=mg['message_id'], reply_markup=markup)
    except Exception:
        msg = bot.send_message(chat_id, text, reply_markup=markup)
        mg['message_id'] = msg.message_id


def end_multi_game(chat_id):
    mg = multi_games.get(chat_id)
    if not mg:
        return

    winner = None
    if len(mg['players']) == 1:
        winner = mg['players'][0]

    text = "–ò–≥—Ä–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –æ–∫–æ–Ω—á–µ–Ω–∞.\n"
    if winner:
        user = bot.get_chat_member(chat_id, winner).user
        text += f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {mention(user)}!"
    else:
        text += "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç."

    try:
        bot.edit_message_text(text, chat_id=chat_id, message_id=mg['message_id'])
    except Exception:
        bot.send_message(chat_id, text)

    del multi_games[chat_id]

    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=main_menu_markup())


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
